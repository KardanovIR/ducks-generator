{-# STDLIB_VERSION 5 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

let eggsAssetId = base58'53bLXGQhnMxAoiWnza2SJQRp7hNQZVHnyrRziLmwdVjb'
let incubatorAddress = base58'3P6TwNU39Ykkbeqhn5TE4a2736xsA1vXemM'
let farmingAddress = base58'3PH75p2rmMKCV2nyW4TsAdFgFtmc61mJaqA'

func tryGetInteger(key: String) = {
    match getInteger(this, key) {
        case b:Int => b
        case _ => 0
    }
}

func isValidAddress(address: String) = {
  match(addressFromString(address)) {
    case a: Address => true
    case _ => false
  }
}

func tryGetString(key: String) = {
    match getString(this, key) {
        case a:String => a
        case _ => ""
    }
}

@Callable(i)
func addRefKey(refererAddress: String, refererKey: String) = {
  if (i.caller != this) then {
    throw("admin only")
  } else {
    let refStateKey = "key_" + refererKey + "_refererAddress"
    if (tryGetString(refStateKey) == "") then {
      [
        StringEntry(refStateKey, refererAddress),
        StringEntry("address_" + refererAddress + "_refererKey_" + refererKey, refererKey)
      ]
    } else throw("The ref key \"" + refererKey + "\" is already registered")
  }
}

@Callable(i)
func refPayment(refererKey: String) = {
  let referalAddress = i.originCaller.toString()
  if (i.caller.bytes != incubatorAddress && i.caller.bytes != farmingAddress) then {
    throw("This method can be called only by farming and incubator dApps")
  }else if (refererKey == "" || referalAddress == "") then {
    []
  } else {

    let refererAddress = match getString(this, "key_" + refererKey + "_refererAddress") {
      case x: String => x
      case _ => refererKey
    }
    
    let refererAddressValue = refererAddress.addressFromStringValue()
    let referalAddressValue = referalAddress.addressFromStringValue()
    let paymentForReferer = i.payments[0].value()

    let refererEarnedReward = "address_" + refererAddress + "_earnedReward"
    let referalDeliveredReward = "address_" + referalAddress + "_deliveredReward"

    let correctReferer = match getString(this, "address_" + referalAddress + "_referedBy") {
      case x: String => x
      case _ => refererAddress
    } 

    if (refererAddress == referalAddress) then {
      throw("you cannot be referer for yourself")
    } else {
      [
        StringEntry(correctReferer, refererAddress),
        IntegerEntry(refererEarnedReward, tryGetInteger(refererEarnedReward) + paymentForReferer.amount),
        IntegerEntry(referalDeliveredReward, tryGetInteger(referalDeliveredReward) + paymentForReferer.amount),
        ScriptTransfer(refererAddressValue, paymentForReferer.amount, paymentForReferer.assetId)
      ]
    }

  }
}

@Verifier(tx)
func verify() = sigVerify(tx.bodyBytes, tx.proofs[0], tx.senderPublicKey)
        
