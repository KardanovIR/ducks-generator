{-# STDLIB_VERSION 5 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

let eggsAssetId = base58'53bLXGQhnMxAoiWnza2SJQRp7hNQZVHnyrRziLmwdVjb'
let IncubatorDappAddress = base58'ABC'
let FarmingDappAddress = base58'ABC'

func tryGetInteger(key: String) = {
    match getInteger(this, key) {
        case b:Int => b
        case _ => 0
    }
}

func isValidAddress(address: String) = {
  match(addressFromString(address)) {
    case a: Address => true
    case _ => false
  }
}

func tryGetString(key: String) = {
    match getString(this, key) {
        case a:String => a
        case _ => ""
    }
}

@Callable(i)
func registerRefererKey(refererKey: String) = {
  if (isValidAddress(refererKey)) then {
    throw("Referer key code cannot contain be a valid Waves address")
  }else {
    let refererAddress = i.caller.toString()
    let refStateKey = "key_" + refererKey + "_refererAddress"
    if (tryGetString(refStateKey) == "") then {
      [
        StringEntry(refStateKey, refererAddress),
        StringEntry("address_" + refererAddress + "_refererKey_" + refererKey, refererKey)
      ]
    } else throw("This ref \"" + refererKey + "\" key is already registered")
  }
}

@Callable(i)
func addReferal(refererAddress: String) = {
  let referalAddress = i.originCaller.toString()
  if (i.caller.bytes != IncubatorDappAddress && i.caller.bytes != FarmingDappAddress) then {
    throw("This method can be called only by farming and incubator dApps")
  }else if (refererAddress == "" || referalAddress == "") then {
    []
  }else if (isValidAddress(refererAddress) && isValidAddress(referalAddress)) then {
    let refererAddressValue = refererAddress.addressFromStringValue()
    let referalAddressValue = referalAddress.addressFromStringValue()
    let paymentForReferer = i.payments[0].value()

    let keyReferer = "address_" + referalAddress + "_referer"

    let currentRefererAddress = tryGetString(keyReferer)
    let refererEarnedReward = "address_" + referalAddress + "_earnedReward"
    let referadDeliveredReward = "address_" + referalAddress + "_deliveredReward"

    if (currentRefererAddress == "" || currentRefererAddress == refererAddress) then {
      [
        StringEntry(keyReferer, refererAddress),
        IntegerEntry(refererEarnedReward, tryGetInteger(refererEarnedReward) + paymentForReferer.amount),
        IntegerEntry(referadDeliveredReward, tryGetInteger(referadDeliveredReward) + paymentForReferer.amount),
        ScriptTransfer(refererAddressValue, paymentForReferer.amount, paymentForReferer.assetId)
      ]
    } else throw("User already has another referrer")
  } else throw("Provided referer address is incorrect: " + refererAddress)
}

@Verifier(tx)
func verify() = sigVerify(tx.bodyBytes, tx.proofs[0], tx.senderPublicKey)
        
