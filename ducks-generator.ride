{-# STDLIB_VERSION 4 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

let eggsAssetId = base58'53bLXGQhnMxAoiWnza2SJQRp7hNQZVHnyrRziLmwdVjb'
let delayForHatching = 2
let discountCoefficient = 1
let typesAmount = 2

let HatchingStarted = "HATCHING_STARTED"
let HatchingFinished = "HATCHING_FINISHED"


func getHatchingStatusKey(address: String, txId: ByteVector) = {
  # stores the fact of hatching, 
  # if key exists = hatching started 
  # if false = not claimed
  # if true = claimed and nft id will be in the key of getDuckIdKey
  address + "_" + txId.toBase58String() +  "_status"
}

func getHatchingFinishHeightKey(address: String, txId: ByteVector) = {
  address + "_" + txId.toBase58String() +  "_fh"
}

func getDuckIdKey(address: String, txId: ByteVector) = {
  address + "_" + txId.toBase58String() +  "_di"
}

func getDuckStatsKey(genString: String) = {
  "stats_" + genString + "_amount"
}

func tryGetInteger(key: String) = {
    let val = match getInteger(this, key) {
        case b:Int => b
        case _ => 0
    }
    val
}

func getRandomNumber(variants: Int, txId: ByteVector, hatchingFinishHeight: Int, offset: Int) = {
  let randomSeedBlock = blockInfoByHeight(hatchingFinishHeight-1).value()
  let randomHash = sha256(txId + randomSeedBlock.vrf.value())
  randomHash.toInt(offset*8) % variants
}

func getRandomName(txId: ByteVector, hatchingFinishHeight: Int) = {
  let typeRandom = getRandomNumber(2, txId, hatchingFinishHeight, 0)
  let colorRandom = getRandomNumber(4,  txId, hatchingFinishHeight, 1)
  let color = if (colorRandom == 0) then "Y"
    else if (colorRandom == 1) then "G" 
    else if (colorRandom == 2) then "B" 
    else "R"

  if (typeRandom == 0) then "DUCK-AAAAAAAA-G" + color
    else "DUCK-BBBBBBBB-G" + color
}

func countEggsNeededAmount(totalDucksAmount: Int) = {
  let n = totalDucksAmount
  let g = discountCoefficient
  let t = typesAmount
  let price = pow((100 + n*g/t), 2, 5, 1, 2, DOWN)
  price
}

@Callable(i)
func startDuckHatching() = {

  let totalDucksAmount = tryGetInteger("ducks_amount")
  let eggsNeeded = countEggsNeededAmount(totalDucksAmount)

  let firstPayment = i.payments[0].value()
  if (firstPayment.assetId != eggsAssetId) then throw("You can attach only EGG tokens with the following asset id: " + eggsAssetId.toBase58String())
   else if (firstPayment.amount < eggsNeeded)  then throw("To hatch a duck you currently need the following amount of EGGlets: " + eggsNeeded.toString())
   else {
     [
      StringEntry(getHatchingStatusKey(i.caller.toString(), i.transactionId), HatchingStarted),
      IntegerEntry(getHatchingFinishHeightKey(i.caller.toString(), i.transactionId), height + delayForHatching),
      IntegerEntry("ducks_amount", totalDucksAmount + 1),
      IntegerEntry("ducks_last_price", eggsNeeded)
      ScriptTransfer(i.caller, firstPayment.amount - eggsNeeded, eggsAssetId)
     ]
  }
}


@Callable(i)
func finishDuckHatching(txIdStr: String) = {

  let txId = fromBase58String(txIdStr)
  let hatchingStatusKey = getHatchingStatusKey(i.caller.toString(), txId)
  let finishHeightKey = getHatchingFinishHeightKey(i.caller.toString(), txId)
  let duckIdKey = getDuckIdKey(i.caller.toString(), txId)

  let hatchingTxStatus = getStringValue(this, hatchingStatusKey)
  let hatchingFinishHeight = getIntegerValue(this, finishHeightKey)
  
  if (hatchingTxStatus == HatchingFinished) then {
    let duckId = getStringValue(this, getDuckIdKey(i.caller.toString(), txId))
    throw("The duck was hatched and claimed already, here is the folowing: " + duckId)
  } else 
    if (hatchingFinishHeight > height) then throw("Hatching is not finished yet " + (hatchingFinishHeight - height).toString() + " blocks remaining, it will take around " +  (hatchingFinishHeight - height).toString() + " minutes")
    else {
      let duckGen = getRandomName(txId, hatchingFinishHeight)
      let description = "{\"genotype\": \"" + duckGen + "\", \"crossbreeding\": true}"

      let asset = Issue(duckGen, description, 1, 0, false, unit, hatchingFinishHeight)
      let assetId = asset.calculateAssetId()

      let amount = tryGetInteger(getDuckStatsKey(duckGen)) + 1

      [
        StringEntry(hatchingStatusKey, HatchingFinished),
        StringEntry(duckIdKey, assetId.toBase58String()),
        StringEntry(assetId.toBase58String(), duckIdKey),
        IntegerEntry(getDuckStatsKey(duckGen), amount),
        asset,
        ScriptTransfer(i.caller, 1, assetId)
      ]
    }
}

@Verifier(tx)
func verify() = sigVerify(tx.bodyBytes, tx.proofs[0], tx.senderPublicKey)

        
